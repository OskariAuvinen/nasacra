{"version":3,"sources":["Components/Etusivu.js","Explanation.js","GetTitle.js","App.js","serviceWorker.js","index.js"],"names":["NameField","useState","nimi","change","value","placeholder","onChange","e","target","Taulukko","planetName","setPlanetName","planetid","planets","setPlanets","map","p","i","type","onClick","length","console","log","FetchNasaData","tieto","postData","useEffect","fetch","then","res","json","data","hdurl","src","alt","GetExplanation","explanation","GetTitle","title","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAEO,SAASA,IAAa,IAAD,EACDC,qBADC,mBACjBC,EADiB,KACXC,EADW,KAIxB,OACI,6BACI,oDACA,wCACC,6BACID,EACD,6BACA,2BAAOE,MAAOF,EAAMG,YAAY,mBAAaC,SATpC,SAACC,GAAD,OACjBJ,EAAOI,EAAEC,OAAOJ,YAcjB,SAASK,IAAY,IAAD,EACaR,mBAAS,IADtB,mBAChBS,EADgB,KACJC,EADI,OAEOV,mBAAS,CAAC,CAAES,WAAY,MAAOE,SAAS,KAF/C,mBAEhBC,EAFgB,KAEPC,EAFO,KAUvB,OACI,6BACI,4BACKD,EAAQE,KAAI,SAACC,EAAGC,GAAJ,OAAW,4BAAKD,EAAEN,gBAEnC,2BAAON,MAAOM,EAAYL,YAAY,6BAAuBC,SAZtC,SAACC,GAAD,OAAOI,EAAcJ,EAAEC,OAAOJ,UAarD,2BAAOc,KAAK,SAASd,MAAM,cAAQe,QAZzB,WACdL,EAAW,GAAD,mBAAKD,GAAL,CAAc,CAAEH,WAAYA,EAAYE,SAAUC,EAAQO,OAAO,MAC3ET,EAAc,IACdU,QAAQC,IAAIT,OAcb,SAASU,IAAgB,IAAD,EACDtB,mBAAS,IADR,mBACpBuB,EADoB,KACbC,EADa,KAW3B,OATAC,qBAAU,WACNC,MAAM,wFACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAEN,EAASM,EAAKC,YAEhC,IAKE,6BACI,2BAAG,yBAAKC,IAAKT,EAAOU,IAAI,oB,MClD7B,SAASC,IAAiB,IAAD,EACFlC,mBAAS,IADP,mBACrBuB,EADqB,KACdC,EADc,KAW5B,OATAC,qBAAU,WACNC,MAAM,wFACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAEN,EAASM,EAAKK,kBAEhC,IAKE,6BACKZ,GCbN,SAASa,IAAW,IAAD,EACIpC,mBAAS,IADb,mBACfuB,EADe,KACRC,EADQ,KAWtB,OATAC,qBAAU,WACNC,MAAM,wFACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAEN,EAASM,EAAKO,YAEhC,IAKE,4BACKd,GCKEe,MAff,WACE,OACE,yBAAKC,UAAU,OACf,kBAACxC,EAAD,MACA,yDACA,kBAACS,EAAD,MACA,6BACA,kBAAC0B,EAAD,MACA,6BACA,kBAACE,EAAD,MACA,kBAACd,EAAD,QCJgBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.8927c7b3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport function NameField() {\r\n    const [nimi, change] = useState();\r\n    const handleChange = (e) =>\r\n        change(e.target.value)\r\n    return (\r\n        <div>\r\n            <h2>Tervetuloa NasaApiin</h2>\r\n            <p>Tervetuloa\r\n             <br></br>\r\n                {nimi}\r\n                <br></br>\r\n                <input value={nimi} placeholder=\"Syötä nimi\" onChange={handleChange} />\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function Taulukko() {\r\n    const [planetName, setPlanetName] = useState('');\r\n    const [planets, setPlanets] = useState([{ planetName: 'Maa', planetid:0}])\r\n    const handlePlanetNameChange = (e) => setPlanetName(e.target.value);\r\n    const handleAdd = () => {\r\n        setPlanets([...planets, { planetName: planetName, planetid: planets.length+1 }]);\r\n        setPlanetName(\"\");\r\n        console.log(planets);\r\n    \r\n    } \r\n    return (\r\n        <div>\r\n            <ul>\r\n                {planets.map((p, i) => (<li>{p.planetName}</li>))}\r\n            </ul>\r\n            <input value={planetName} placeholder=\"Syötä Planeetan nimi\" onChange={handlePlanetNameChange} />\r\n            <input type=\"submit\" value=\"Lisää\" onClick={handleAdd} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function FetchNasaData(){\r\n    const [tieto, postData] = useState(\"\");\r\n    useEffect(() =>{\r\n        fetch('https://api.nasa.gov/planetary/apod?api_key=zxRBp0T37f3A5yqQFS8uYwfRsSgl1Cg2DRfAla6H')\r\n            .then(res => res.json())\r\n            .then(data=>postData(data.hdurl))\r\n            \r\n    },[]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p><img src={tieto} alt=\"FetchNasaData\"/></p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nexport function GetExplanation(){\r\n    const [tieto, postData] = useState(\"\");\r\n    useEffect(() =>{\r\n        fetch('https://api.nasa.gov/planetary/apod?api_key=zxRBp0T37f3A5yqQFS8uYwfRsSgl1Cg2DRfAla6H')\r\n            .then(res => res.json())\r\n            .then(data=>postData(data.explanation))\r\n            \r\n    },[]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {tieto}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nexport function GetTitle(){\r\n    const [tieto, postData] = useState(\"\");\r\n    useEffect(() =>{\r\n        fetch('https://api.nasa.gov/planetary/apod?api_key=zxRBp0T37f3A5yqQFS8uYwfRsSgl1Cg2DRfAla6H')\r\n            .then(res => res.json())\r\n            .then(data=>postData(data.title))\r\n            \r\n    },[]);\r\n\r\n\r\n\r\n    return (\r\n        <h1>\r\n            {tieto}\r\n     </h1>\r\n    )\r\n}","import React from 'react';\nimport {NameField, Taulukko, FetchNasaData} from './Components/Etusivu';\nimport './App.css';\nimport { GetExplanation } from './Explanation';\nimport { GetTitle } from './GetTitle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <NameField />\n    <h4>Planeetta Bongaus Lista: </h4>\n    <Taulukko />\n    <br></br>\n    <GetExplanation />\n    <br></br>\n    <GetTitle />\n    <FetchNasaData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}